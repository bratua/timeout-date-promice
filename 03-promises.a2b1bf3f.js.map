{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAU/B,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACjBC,YAAW,WACfN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,MAdPN,EAAKC,KAAKa,iBAAiB,UAyC3B,SAAkBC,GAChBA,EAAEC,iBACF,IAAgCC,EAAAF,EAAEG,cAA1BZ,EAAwBW,EAAxBX,MAAOa,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,QAzBvB,SAA0BC,GACxB,I,IAD0BC,EAAFD,EAAEf,MAAOa,EAATE,EAASF,KAAMC,EAAfC,EAAeD,OAC9BG,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EAGrDnB,EAAcmB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,UAIjDwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA5B,GAAS6B,OAAOI,QACd,sBAAuCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,UAKnDgB,GAASH,EACTa,QAAQC,IAAIX,IAQdY,CAAiB,CACf5B,MAAO6B,OAAO7B,EAAM8B,OACpBjB,KAAMgB,OAAOhB,EAAKiB,OAClBhB,OAAQe,OAAOf,EAAOgB,SAGxBrB,EAAEG,cAAcmB,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport '../css/common.css';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nlet timerId = null;\n\nrefs.form.addEventListener('submit', onSubmit);\n\n// promiseGenerator({ delay: 1000, step: 1000, amount: 50 });\n// console.log(refs.form);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    timerId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction promiseGenerator({ delay, step, amount }) {\n  for (let position = 1; position <= amount; position += 1) {\n    // console.log(position);\n    // console.log(delay);\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n    console.log(delay);\n  }\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.currentTarget;\n\n  promiseGenerator({\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value),\n  });\n\n  e.currentTarget.reset();\n  // clearTimeout(timerId);\n  // console.log(delay.value, step.value, amount.value);\n}\n\n// createPromise(5, 500)\n// .then(({ position, delay }) => {\n//   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// })\n// .catch(({ position, delay }) => {\n//   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// });\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","_currentTarget","currentTarget","step","amount","param1","delay1","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","console","log","$ce04d3a99e08e73b$var$promiseGenerator","Number","value","reset"],"version":3,"file":"03-promises.a2b1bf3f.js.map"}